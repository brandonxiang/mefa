{"version":3,"file":"mefa.mjs","sources":["../src/index.ts"],"sourcesContent":["export default class Mefa {\n    frame: any;\n    subSystems: object;\n    currentApp: string;\n    currentRoute: string;\n\n    constructor(frame) {\n      // 设置frame\n      this.frame = frame\n      this.subSystems = {}\n      this.currentApp = ''\n      this.currentRoute = ''\n    }\n  \n    registerApplication({ app, route, link }): void {\n      if(!app || !route || !link) return;\n  \n      if(!this.currentRoute) this.currentRoute = route\n      if(!this.currentApp) {\n        this.currentApp = app\n        this.frame.src = link\n      }\n      // TODO: 去重复系统和路由\n      if(!this.checkDuplicatedApp(app)) {\n        this.subSystems[app] = {link, route: [route]}\n      } else if(!this.checkDuplicatedRoute(app, route)) {\n        const oldRoute = this.subSystems[app].route\n        oldRoute.push(route)\n      }\n    }\n  \n    navigateTo({ app, route }) {\n      if(this.isInSameSystem(app)) {\n        if(!this.isInSamePage(app, route)){\n          this.navigateInSystem(app, route)\n          this.updateApp(app, route)\n        }\n      }else {\n        this.navigateOutSystem(app)\n        this.updateApp(app, route)\n      }\n    }\n  \n    checkDuplicatedApp(app) {\n      // true 为重复app\n      return this.subSystems.hasOwnProperty(app)\n    }\n  \n    checkDuplicatedRoute(app, route) {\n      // true 为重复route\n      return (this.subSystems[app].route.indexOf(route) > -1)\n    }\n  \n    navigateInSystem(system, name) {\n      this.frame.contentWindow.postMessage({route: name}, '*')\n    }\n  \n    navigateOutSystem(system) {\n      const link = this.subSystems[system].link\n      this.frame.src = link\n    }\n  \n    isInSameSystem(system) {\n      return this.currentApp && this.currentApp === system;\n    }\n  \n    isInSamePage(system, page) {\n      return this.isInSameSystem(system) && this.currentRoute && this.currentRoute === page\n    }\n  \n    updateApp(system, page) {\n      this.currentApp = system\n      this.currentRoute = page\n    }\n  \n    static onRouteUpdate(cb: Function) {\n      window.addEventListener('message', (res) => {\n        if(res.data) {\n          cb(res.data.route)\n        }\n      })\n    }\n  } "],"names":["frame","this","subSystems","currentApp","currentRoute","Mefa","_a","app","route","link","src","checkDuplicatedApp","checkDuplicatedRoute","push","isInSameSystem","isInSamePage","navigateInSystem","updateApp","navigateOutSystem","hasOwnProperty","indexOf","system","name","contentWindow","postMessage","page","cb","window","addEventListener","res","data"],"mappings":"0BAMI,WAAYA,GAEVC,KAAKD,MAAQA,EACbC,KAAKC,WAAa,GAClBD,KAAKE,WAAa,GAClBF,KAAKG,aAAe,GAuExB,OApEEC,gCAAA,SAAoBC,OAAEC,QAAKC,UAAOC,SAChC,GAAIF,GAAQC,GAAUC,EAQtB,GANIR,KAAKG,eAAcH,KAAKG,aAAeI,GACvCP,KAAKE,aACPF,KAAKE,WAAaI,EAClBN,KAAKD,MAAMU,IAAMD,GAGfR,KAAKU,mBAAmBJ,IAErB,IAAIN,KAAKW,qBAAqBL,EAAKC,GAAQ,CAC/BP,KAAKC,WAAWK,GAAKC,MAC7BK,KAAKL,SAHdP,KAAKC,WAAWK,GAAO,CAACE,OAAMD,MAAO,CAACA,KAO1CH,uBAAA,SAAWC,OAAEC,QAAKC,UACbP,KAAKa,eAAeP,GACjBN,KAAKc,aAAaR,EAAKC,KACzBP,KAAKe,iBAAiBT,EAAKC,GAC3BP,KAAKgB,UAAUV,EAAKC,KAGtBP,KAAKiB,kBAAkBX,GACvBN,KAAKgB,UAAUV,EAAKC,KAIxBH,+BAAA,SAAmBE,GAEjB,OAAON,KAAKC,WAAWiB,eAAeZ,IAGxCF,iCAAA,SAAqBE,EAAKC,GAExB,OAAQP,KAAKC,WAAWK,GAAKC,MAAMY,QAAQZ,IAAU,GAGvDH,6BAAA,SAAiBgB,EAAQC,GACvBrB,KAAKD,MAAMuB,cAAcC,YAAY,CAAChB,MAAOc,GAAO,MAGtDjB,8BAAA,SAAkBgB,GAEhBpB,KAAKD,MAAMU,IADET,KAAKC,WAAWmB,GAAQZ,MAIvCJ,2BAAA,SAAegB,GACb,OAAOpB,KAAKE,YAAcF,KAAKE,aAAekB,GAGhDhB,yBAAA,SAAagB,EAAQI,GACnB,OAAOxB,KAAKa,eAAeO,IAAWpB,KAAKG,cAAgBH,KAAKG,eAAiBqB,GAGnFpB,sBAAA,SAAUgB,EAAQI,GAChBxB,KAAKE,WAAakB,EAClBpB,KAAKG,aAAeqB,GAGfpB,gBAAP,SAAqBqB,GACnBC,OAAOC,iBAAiB,UAAW,SAACC,GAC/BA,EAAIC,MACLJ,EAAGG,EAAIC,KAAKtB"}